% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_param.R
\name{find_param}
\alias{find_param}
\title{Solves a system of nonlinear equations}
\usage{
find_param(
  rho_prime = rho_prime_logistic,
  f_prime1 = f_prime1_logistic,
  f_prime0 = f_prime0_logistic,
  kappa,
  gamma,
  beta0 = 0,
  intercept = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{rho_prime}{A function that computes the success probability \eqn{\mathrm{P}(Y=1 | X^\top \beta)},
here \eqn{\beta} is the coefficient. The default is logistic model.}

\item{f_prime1}{A function. Derivative of the loss function when \eqn{Y = 1}.
The default is the derivative of the negative log-likelihood of logistic
regression when \eqn{Y = 1}.}

\item{f_prime0}{A function. Derivative of the loss function when \eqn{Y = -1}.
The default is the derivative of the negative log-likelihood of logistic
regression when \eqn{Y = -1}.}

\item{kappa}{Numeric. The problem dimension \eqn{\kappa = p/n}.}

\item{gamma}{Numeric. Signal strength \eqn{\gamma = \sqrt(\mathrm{Var}(X^\top \beta))}.}

\item{beta0}{Numeric. Intercept.}

\item{intercept}{If \code{TRUE}, the glm contains an intercept term.
\code{intercept = TRUE} by default.}

\item{verbose}{If \code{TRUE}, print progress at each step.}
}
\value{
A vector solution to the system. When \code{gamma != 0} and \code{b !=0},
    it is \eqn{(\alpha_\star, \lambda_\star, \sigma_\star, b_\star)}.
    When signal strength is zero (\code{gamma = 0}), solutions to the system with
    three equations \eqn{(\lambda_\star, \sigma_\star, b_\star)}. When \code{gamma = 0} and
    \code{b = 0}, returns \eqn{(\lambda_\star, \sigma_\star)}.
}
\description{
This function solves a system of equations, whose solution characterizes
the asymptotic bias and variance of the M-estimator,
as well as the Hessian of the loss function (in case of the MLE, it is the negative log-likelihood).
}
\examples{
# Compute parameters for a logistic model
param <- find_param(kappa = 0.1, gamma = sqrt(5))
# Asymptotic bias
param[1]
# Standard deviation
param[3] / sqrt(0.1)
# Another example
param <- find_param(kappa = 0.1, gamma = 0, intercept = FALSE)
# Asymptotic standard deviation
param[2] / sqrt(0.1)
}
