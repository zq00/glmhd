% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/adjust_binary.R
\name{adjust_binary}
\alias{adjust_binary}
\title{Adjust the MLE in a binary regression}
\usage{
adjust_binary(glm_output, verbose = TRUE, echo = TRUE, ...)
}
\arguments{
\item{glm_output}{An object from the class \code{glm},
for example the output from the \code{\link[stats]{glm}} function}

\item{verbose}{If \code{TRUE}, print progress at every step.}

\item{echo}{If \code{TRUE}, return the input \code{glm_output}.}

\item{...}{Additional arguments.}
}
\value{
A list with elements
\describe{
\item{glm_output}{If \code{echo = TRUE}, returns the input \code{glm_output}.}
\item{gamma_hat}{Estimated signal strength \eqn{\gamma_0}.}
\item{param}{Estimated paramters \eqn{(\alpha_\star, \lambda_\star, \sigma_\star, b_\star)}}
\item{intercept}{Does the model contain an intercept?}
\item{tau_hat}{Estimated conditional standard deviation}
\item{coef_adj}{Adjusted MLE: this is \eqn{\hat{\beta}^{\mathrm{MLE}} / \alpha_\star}.}
\item{std_adj}{Estimated standard error of \eqn{\hat{\beta}_j}: \eqn{\sigma_\star / \tau_j}.}
\item{coef_unadj}{Unadjusted MLE.}
\item{std_unadj}{Unadjusted standard error. This is output from the \code{\link[stats]{glm}}.}
}
}
\description{
This function computes the asymptotic bias and variance of the MLE of a binary regression
when both \eqn{n} and \eqn{p} are large,
assuming that covariates \eqn{X} are multivariate Gaussian.
}
\details{
This function estimates coefficients of a binary regression by adjusting the MLE
based on the theory when \eqn{n} and \eqn{p} grows to infinity, and the covariates are multivariate Gaussian.
In this setting, the MLE of one variable \eqn{\beta_j} is
\deqn{
\hat{\beta}^{\mathrm{MLE}}_j - \alpha_\star \beta_j \approx \mathcal{N}(0, \sigma_\star^2 / \tau_j^2).
}
where \eqn{\tau_j^2} is the conditional variance of \eqn{x_j} given all the other variables.
This implies \eqn{\hat{\beta}_j^\mathrm{Adj} = \hat{\beta}^{MLE}_j / \alpha_\star} is unbiased for the coefficient \eqn{\beta_j}.
\code{adjust_binary} computes \eqn{\hat{\beta}_j^\mathrm{Adj}} and returns it in the vector \code{coef_adj}.
}
\section{Notes}{

\itemize{
  \item The variables should be centered to have zero mean.
  \item The input to this function should be an object from the class \code{glm},
  and it should include \code{family} specifying the link function. Currently, the algorithm
  can handle logit and probit link.
}
}

\examples{
\dontrun{
# Problem size
n <- 1000L
p <- 300L
# Generate data matrix
X <- matrix(rnorm(n*p, 0, 1), n, p) / sqrt(p)
# Sample parameters
beta <- rep(c(0, 1), p / 2) * 2
# Generate response
Y <- rbinom(n, 1, 1 / (1 + exp(- X \%*\% beta)))
fit <- glm(Y ~ X + 0, family = binomial, x = TRUE, y = TRUE)
adjusted_fit <- adjust_binary(fit)
# Adjusted MLE
head(adjusted_fit$coef_unadj)
}
}
\references{
\emph{The Asymptotic Distribution of the MLE in High-dimensional Logistic Models: Arbitrary Covariance}, Qian Zhao, Pragya Sur and Emmanuel J. Candes, arXiv:2001.09351
}
